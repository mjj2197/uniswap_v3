query AllV3Ticks($poolAddress: String, $skip: Int!) {
  ticks(first: 1000, skip: $skip, where: { poolAddress: $poolAddress }, orderBy: tickIdx) {
    tick: tickIdx
    liquidityNet
    price0
    price1
  }
}

query FeeTierDistribution($token0: String!, $token1: String!) {
  _meta {
    block {
      number
    }
  }
  asToken0: pools(orderBy: totalValueLockedToken0, orderDirection: desc, where: { token0: $token0, token1: $token1 }) {
    feeTier
    totalValueLockedToken0
    totalValueLockedToken1
  }
  asToken1: pools(orderBy: totalValueLockedToken0, orderDirection: desc, where: { token0: $token1, token1: $token0 }) {
    feeTier
    totalValueLockedToken0
    totalValueLockedToken1
  }
}

# 为了 Exploare 页面支持 v3 subgraph, 需要对页面中的字段单独设计 Query
# 获取所有token Id，用于分页展示
query AllTokens {
  tokens {
    id
  }
}
# 通过token id 获取token详细信息,用在 id 分页后，获取每个token的详细信息
query TokensBulk($ids: [ID!], $block: Block_height) {
  tokens(where: { id_in: $ids }, block: $block, orderBy: totalValueLockedUSD, orderDirection: desc, subgraphError: allow) {
    id
    symbol
    name
    derivedETH
    volumeUSD
    volume
    txCount
    totalValueLocked
    feesUSD
    totalValueLockedUSD
  }
}

# 获取 block 信息
query BlocksFromTimestamp($timestamp: BigInt, $timestampEnd: BigInt) {
  blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: $timestamp, timestamp_lt: $timestampEnd }) {
    number
    __typename
  }
}

# 获取 ETH 价格
query EthPriceUSD($block24: Block_height, $block48: Block_height, $blockWeek: Block_height) {
  current: bundles(first: 1, subgraphError: allow) {
    ethPriceUSD
  }
  oneDay: bundles(first: 1, block: $block24, subgraphError: allow) {
    ethPriceUSD
  }
  twoDay: bundles(first: 1, block: $block48, subgraphError: allow) {
    ethPriceUSD
  }
  oneWeek: bundles(first: 1, block: $blockWeek, subgraphError: allow) {
    ethPriceUSD
  }
}
# 获取所有token Id，用于分页展示
query AllV3Pools {
  pools {
    id
  }
}
query PoolsBulk($ids: [ID!], $block: Block_height) {
  pools(where: { id_in: $ids }, block: $block, orderBy: totalValueLockedUSD, orderDirection: desc) {
    id
    feeTier
    liquidity
    sqrtPrice
    tick
    token0 {
      id
      symbol
      name
      decimals
      derivedETH
    }
    token1 {
      id
      symbol
      name
      decimals
      derivedETH
    }
    token0Price
    token1Price
    volumeUSD
    txCount
    totalValueLockedToken0
    totalValueLockedToken1
    totalValueLockedUSD
  }
}
# token detail page
query TokensById($address: ID!) {
  token(id: $address) {
    id
    symbol
    name
    derivedETH
    volumeUSD
    volume
    txCount
    totalValueLocked
    totalValueLockedUSD
    feesUSD
    tokenDayData(first: 1, orderDirection: desc, orderBy: date) {
      date
      volume
      volumeUSD
    }
  }
}

query TokenPools($address: String!) {
  asToken0: pools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc, where: { token0: $address }, subgraphError: allow) {
    id
    feeTier
    liquidity
    sqrtPrice
    tick
    token0 {
      id
      symbol
      name
      decimals
      derivedETH
    }
    token1 {
      id
      symbol
      name
      decimals
      derivedETH
    }
    token0Price
    token1Price
    volumeUSD
    txCount
    totalValueLockedToken0
    totalValueLockedToken1
    totalValueLockedUSD
  }
  asToken1: pools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc, where: { token1: $address }, subgraphError: allow) {
    id
    feeTier
    liquidity
    sqrtPrice
    tick
    token0 {
      id
      symbol
      name
      decimals
      derivedETH
    }
    token1 {
      id
      symbol
      name
      decimals
      derivedETH
    }
    token0Price
    token1Price
    volumeUSD
    txCount
    totalValueLockedToken0
    totalValueLockedToken1
    totalValueLockedUSD
  }
}

query TokenDayDatas($startTime: Int!, $skip: Int!, $address: String!) {
  tokenDayDatas(first: 1000, skip: $skip, where: { token: $address, date_gt: $startTime }, orderBy: date, orderDirection: asc) {
    date
    volumeUSD
    totalValueLockedUSD
  }
}
query UniswapDayDatas {
  uniswapDayDatas(first: 1000) {
    id
    date
    tvlUSD
    volumeUSD
  }
}

query PoolById($address: ID!) {
  pool(id: $address) {
    id
    feeTier
    liquidity
    sqrtPrice
    tick
    token0 {
      id
      symbol
      name
      decimals
      derivedETH
    }
    token1 {
      id
      symbol
      name
      decimals
      derivedETH
    }
    token0Price
    token1Price
    volumeUSD
    txCount
    totalValueLockedToken0
    totalValueLockedToken1
    totalValueLockedUSD
  }
}
query PoolTransactions($address: String!) {
  mints(first: 500, orderBy: timestamp, orderDirection: desc, where: { pool: $address }, subgraphError: allow) {
    timestamp
    transaction {
      id
    }
    pool {
      token0 {
        id
        symbol
        name
      }
      token1 {
        id
        symbol
        name
      }
    }
    owner
    origin
    amount0
    amount1
    amountUSD
  }
  swaps(first: 500, orderBy: timestamp, orderDirection: desc, where: { pool: $address }, subgraphError: allow) {
    timestamp
    transaction {
      id
    }
    origin
    sender
    pool {
      token0 {
        id
        symbol
        name
      }
      token1 {
        id
        symbol
        name
      }
    }
    amount0
    amount1
    amountUSD
  }
  burns(first: 500, orderBy: timestamp, orderDirection: desc, where: { pool: $address }, subgraphError: allow) {
    timestamp
    transaction {
      id
    }
    owner
    origin
    pool {
      token0 {
        id
        symbol
        name
      }
      token1 {
        id
        symbol
        name
      }
    }
    amount0
    amount1
    amountUSD
  }
}
# Transactions
query Transactions {
  transactions(first: 500, orderBy: timestamp, orderDirection: desc, subgraphError: allow) {
    id
    timestamp
    mints {
      pool {
        token0 {
          id
          symbol
          name
        }
        token1 {
          id
          symbol
          name
        }
      }
      owner
      sender
      origin
      amount0
      amount1
      amountUSD
    }
    swaps {
      pool {
        token0 {
          id
          symbol
          name
        }
        token1 {
          id
          symbol
          name
        }
      }
      origin
      sender
      amount0
      amount1
      amountUSD
    }
    burns {
      pool {
        token0 {
          id
          symbol
          name
        }
        token1 {
          id
          symbol
          name
        }
      }
      owner
      origin
      amount0
      amount1
      amountUSD
    }
  }
}

query TokenTransactions($address: String!) {
  mintsAs0: mints(first: 500, orderBy: timestamp, orderDirection: desc, where: { token0: $address }, subgraphError: allow) {
    timestamp
    transaction {
      id
    }
    pool {
      token0 {
        id
        symbol
        name
      }
      token1 {
        id
        symbol
        name
      }
    }
    owner
    sender
    origin
    amount0
    amount1
    amountUSD
  }
  mintsAs1: mints(first: 500, orderBy: timestamp, orderDirection: desc, where: { token0: $address }, subgraphError: allow) {
    timestamp
    transaction {
      id
    }
    pool {
      token0 {
        id
        symbol
        name
      }
      token1 {
        id
        symbol
        name
      }
    }
    owner
    sender
    origin
    amount0
    amount1
    amountUSD
  }
  swapsAs0: swaps(first: 500, orderBy: timestamp, orderDirection: desc, where: { token0: $address }, subgraphError: allow) {
    timestamp
    transaction {
      id
    }
    pool {
      token0 {
        id
        symbol
        name
      }
      token1 {
        id
        symbol
        name
      }
    }
    origin
    amount0
    amount1
    amountUSD
  }
  swapsAs1: swaps(first: 500, orderBy: timestamp, orderDirection: desc, where: { token1: $address }, subgraphError: allow) {
    timestamp
    transaction {
      id
    }
    pool {
      token0 {
        id
        symbol
        name
      }
      token1 {
        id
        symbol
        name
      }
    }
    origin
    amount0
    amount1
    amountUSD
  }
  burnsAs0: burns(first: 500, orderBy: timestamp, orderDirection: desc, where: { token0: $address }, subgraphError: allow) {
    timestamp
    transaction {
      id
    }
    pool {
      token0 {
        id
        symbol
        name
      }
      token1 {
        id
        symbol
        name
      }
    }
    owner
    amount0
    amount1
    amountUSD
  }
  burnsAs1: burns(first: 500, orderBy: timestamp, orderDirection: desc, where: { token1: $address }, subgraphError: allow) {
    timestamp
    transaction {
      id
    }
    pool {
      token0 {
        id
        symbol
        name
      }
      token1 {
        id
        symbol
        name
      }
    }
    owner
    amount0
    amount1
    amountUSD
  }
}

# 统计相关
# 每日token 数据
query TokenDayData($token: String) {
  tokenDayDatas(where: { token: $token }) {
    id
    date
    priceUSD
    volumeUSD
    totalValueLockedUSD
    open
    high
    low
    close
  }
}
